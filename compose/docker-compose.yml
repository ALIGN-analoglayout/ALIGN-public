#
# Docker-compose file for running ALIGN Analog flow
# Requires:
#  ALIGN_HOME:      point to to the ALIGN source area
#  ALIGN_WORK_DIR:  point to the current work area for running flow
#        - a directory for use with a bind-mount (Not WSL)
#        - a docker container (works with WSL and Linux)
#
# TO RUN:
#   docker-compose up -d
#   Can also be in work area and run with a file flag for docker-compose:
#
# To rebuild incremental step engine:
#   docker-compose up -d --build <step>
#
# WSL:
#   Create a shared windows directory
#   Copy $ALIGN_HOME/compose to the shared directory and export ALIGN_WORK_DIR=<shared_dir>/compose
#   Run make inside compose:  it shoud bring up containers and run make
#   File system access is delayed, so let things settle before running again (otherwise make can't check dependencies)

version: '3.4'

# YAML anchors for creating defaults
x-environment:
  &default-environment
  - http_proxy
  - https_proxy
  - bhttp_proxy
  - bhttps_proxy
  - TOP=/
  - ALIGN_HOME
  - ALIGN_WORK_DIR

x-service: &default-service
  environment: *default-environment
  network_mode: host
  command: /bin/bash -c "/usr/bin/tail -f /dev/null"
#  user: "1000:1000"
  working_dir: /dataVolume
  volumes:
    - ${ALIGN_WORK_DIR}:/dataVolume
    - /etc/apt/apt.conf:/etc/apt/apt.conf
    
x-build:  &default-build
  dockerfile: Dockerfile
  network: host
  args: 
    - http_proxy=$bhttp_proxy
    - https_proxy=$bhttps_proxy

# Start of services
services:

  # This is experimental for use with WSL.  It is not needed if you can bind mount a folder
  # in the Windows filesystem, but firewalls seem to block
  make-docker-service:
    <<: *default-service
    environment:
      - http_proxy
      - https_proxy
      - bhttp_proxy
      - bhttps_proxy
      - HOME=/
      - ALIGN_HOME=/ALIGN-public
      - ALIGN_WORK_DIR
    image: make_docker_image
    build:
      <<: *default-build
      context: ${ALIGN_HOME}
      dockerfile: compose/Dockerfile
    container_name: make_docker_cont
    volumes:
      - ${ALIGN_WORK_DIR}:/dataVolume
      - /var/run/:/var/run/
      - /tmp/.X11-unix:/tmp/.X11-unix

  fullbuild-service:
    <<: *default-service
    environment:
      - http_proxy
      - https_proxy
      - bhttp_proxy
      - bhttps_proxy
      - ALIGN_HOME=/ALIGN-public
      - ALIGN_WORK_DIR
    image: fullbuild_image
    build:
      <<: *default-build
      context: ${ALIGN_HOME}
      dockerfile: compose/Dockerfile.native
    container_name: fullbuild_cont
    volumes:
      - ${ALIGN_WORK_DIR}:/dataVolume
      - /var/run/:/var/run/
      - /tmp/.X11-unix:/tmp/.X11-unix
      
  transfer-service:
    <<: *default-service
    image: ubuntu
    container_name: transfer_cont

  topology-service:
    <<: *default-service
    image: topology
    build:
      <<: *default-build
      context: ${ALIGN_HOME}/sub_circuit_identification
    container_name: topology_cont

  cellfabric-service:
    <<: *default-service
    image: cellfabric_image
    build:
      <<: *default-build
      context: ${ALIGN_HOME}/
      dockerfile: CellFabric/Dockerfile
    container_name: cellfabric_cont

  protobuf-service:
    <<: *default-service
    image: with_protobuf
    build:
      <<: *default-build
      context: ${ALIGN_HOME}/Build
      dockerfile: Dockerfile.build
    container_name: protobuf_cont

  placeroute-service:
    <<: *default-service
    image: placeroute_image
    build:
      <<: *default-build
      context: ${ALIGN_HOME}/PlaceRouteHierFlow
    container_name: placeroute_cont

  klayoutconvert-service:
    <<: *default-service
    image: klayoutconvert_image
    build:
      <<: *default-build
      context: ${ALIGN_HOME}/Build/ThirdParty/Klayout
      dockerfile: Dockerfile.convert
    container_name: klayoutconvert_cont
  
volumes:
  compose_dataVolume:
    external: true
