version: 2.1

executors:
  docker-executor:
    docker:
      - image: docker:18.06.3-ce-git
    working_directory: /work/workspace

  git-executor:
    docker:
      - image: alpine/git
    working_directory: /work/workspace

jobs:
  start:
    executor: git-executor
    steps:
      - attach_workspace:
          at: /work/workspace
      - checkout
      - persist_to_workspace:
          root: /work/workspace
          paths: .

  build-make:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          apk update
          apk add python3 make bash

          (cd Build/ThirdParty/Klayout && docker build . -t layout_convert -f Dockerfile.convert)
          make build_docker

          python3 -m venv general
          source general/bin/activate	  

          pip install --upgrade pip
          pip install wheel pytest coverage pytest-cov networkx pyyaml python-gdsii

          (cd CellFabric && pip install .)
          (cd GDSConv && pip install .)

      - run:
          make DESIGN_NAME=telescopic_ota ALIGN_docker generate_png

      - store_artifacts:
          path: testcase_latest/Results/telescopic_ota.png

      - run:
          make DESIGN_NAME=switched_capacitor_filter ALIGN_docker generate_png
          
      - store_artifacts:
          path: testcase_latest/Results/switched_capacitor_filter.png

      - run:
          make DESIGN_NAME=current_mirror_ota ALIGN_docker generate_png

      - store_artifacts:
          path: testcase_latest/Results/current_mirror_ota.png

      - run:
          make DESIGN_NAME=five_transistor_ota ALIGN_docker generate_png

      - store_artifacts:
          path: testcase_latest/Results/five_transistor_ota.png

      - run:
          make DESIGN_NAME=cascode_current_mirror_ota ALIGN_docker generate_png

      - store_artifacts:
          path: testcase_latest/Results/cascode_current_mirror_ota.png

# Works but takes too long
#          make DESIGN_NAME=sc_dc_dc_converter ALIGN_docker generate_png

  build-make-compose:
    executor: docker-executor
    steps:

      - attach_workspace:
          at: /work/workspace

      - run: |
          apk update
          apk add py-pip bash

      - run: |
          apk add python-dev libffi-dev openssl-dev gcc libc-dev make
          pip install docker-compose

      - run: |
          echo 'export ALIGN_HOME=/work/workspace' >> $BASH_ENV
          echo 'export ALIGN_WORK_DIR=compose_dataVolume' >> $BASH_ENV
          
      - setup_remote_docker
      
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker volume create --name=compose_dataVolume
            docker-compose up -d make-docker-service
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec make-docker-service bash -c "ln -sf \$ALIGN_HOME/compose/Makefile ."
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec make-docker-service bash -c "make BUILD=docker DESIGN=telescopic_ota" && \
            docker cp make_docker_cont:/dataVolume/telescopic_ota ..
            
      - store_artifacts:
          path: telescopic_ota/pnr_output/Results/telescopic_ota_0.png
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec make-docker-service bash -c "make BUILD=docker DESIGN=switched_capacitor_filter" && \
            docker cp make_docker_cont:/dataVolume/switched_capacitor_filter ..
            
      - store_artifacts:
          path: switched_capacitor_filter/pnr_output/Results/switched_capacitor_filter_0.png
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec make-docker-service bash -c "make BUILD=docker DESIGN=current_mirror_ota" && \
            docker cp make_docker_cont:/dataVolume/current_mirror_ota ..
            
      - store_artifacts:
          path: current_mirror_ota/pnr_output/Results/current_mirror_ota_0.png

      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec make-docker-service bash -c "make BUILD=docker DESIGN=cascode_current_mirror_ota" && \
            docker cp make_docker_cont:/dataVolume/cascode_current_mirror_ota ..
            
      - store_artifacts:
          path: cascode_current_mirror_ota/pnr_output/Results/cascode_current_mirror_ota_0.png
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec make-docker-service bash -c "make BUILD=docker DESIGN=five_transistor_ota" && \
            docker cp make_docker_cont:/dataVolume/five_transistor_ota ..
            
      - store_artifacts:
          path: five_transistor_ota/pnr_output/Results/five_transistor_ota_0.png

          
  build-make-monolithic:
    executor: docker-executor
    steps:

      - attach_workspace:
          at: /work/workspace

      - run: |
          apk update
          apk add py-pip bash

      - run: |
          apk add python-dev libffi-dev openssl-dev gcc libc-dev make
          pip install docker-compose

      - run: |
          echo 'export ALIGN_HOME=/work/workspace' >> $BASH_ENV
          echo 'export ALIGN_WORK_DIR=compose_dataVolume' >> $BASH_ENV
          
      - setup_remote_docker
      
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker volume create --name=compose_dataVolume
            docker-compose up -d fullbuild-service
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
             docker-compose exec fullbuild-service bash -c "ln -sf \$ALIGN_HOME/compose/Makefile ."
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec fullbuild-service bash -c "make DESIGN=telescopic_ota"
            docker cp fullbuild_cont:/dataVolume/telescopic_ota ..
            
      - store_artifacts:
          path: telescopic_ota/pnr_output/Results/telescopic_ota_0.png
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec fullbuild-service bash -c "make DESIGN=switched_capacitor_filter"
            docker cp fullbuild_cont:/dataVolume/switched_capacitor_filter ..
            
      - store_artifacts:
          path: switched_capacitor_filter/pnr_output/Results/switched_capacitor_filter_0.png
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec fullbuild-service bash -c "make DESIGN=current_mirror_ota"
            docker cp fullbuild_cont:/dataVolume/current_mirror_ota ..
            
      - store_artifacts:
          path: current_mirror_ota/pnr_output/Results/current_mirror_ota_0.png

      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec fullbuild-service bash -c "make DESIGN=cascode_current_mirror_ota"
            docker cp fullbuild_cont:/dataVolume/cascode_current_mirror_ota ..
            
      - store_artifacts:
          path: cascode_current_mirror_ota/pnr_output/Results/cascode_current_mirror_ota_0.png
            
      - run:
          shell: /bin/bash
          command: |
            cd compose/
            docker-compose exec fullbuild-service bash -c "make DESIGN=five_transistor_ota"
            docker cp fullbuild_cont:/dataVolume/five_transistor_ota ..
            
      - store_artifacts:
          path: five_transistor_ota/pnr_output/Results/five_transistor_ota_0.png

          
  build-tally:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd Pysat
          docker build -f Dockerfile.tally -t tally_image  .
          docker run --name tally_container tally_image bash -c "source /general/bin/activate && cd tally && coverage run --source=tally,tests setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/tally && cp /tally/junit.xml /test-reports/tally && mkdir -p /coverage-reports/tally && cp -r /tally/coverage.xml /tally/htmlcov /coverage-reports/tally"
          cd -
          docker cp tally_container:coverage-reports .
          docker cp tally_container:test-reports .
          docker rm tally_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/tally
            - coverage-reports/tally


  build-sgi:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          (cd Pysat; docker build -f Dockerfile.tally -t tally_image .)
          cd Experimental/SATBasedMonomorphism
          docker build -t sgi_image .
          docker run --name sgi_container sgi_image bash -c "source /general/bin/activate && cd sgi && coverage run --source=sgi,tests setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/sgi && cp /sgi/junit.xml /test-reports/sgi && mkdir -p /coverage-reports/sgi && cp -r /sgi/coverage.xml /sgi/htmlcov /coverage-reports/sgi"
          cd -

          docker cp sgi_container:coverage-reports .
          docker cp sgi_container:test-reports .
          docker rm sgi_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/sgi
            - coverage-reports/sgi


  build-sci:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd sub_circuit_identification
          docker build -t topology .

          docker run --name sci_container topology bash -c "source sympy/bin/activate && cd sub_circuit_identification/src && pytest --junitxml=junit.xml --cov=. && coverage html && coverage xml && mkdir -p /test-reports/sci && cp /sub_circuit_identification/src/junit.xml /test-reports/sci && mkdir -p /coverage-reports/sci && cp -r /sub_circuit_identification/src/coverage.xml /sub_circuit_identification/src/htmlcov /coverage-reports/sci"
          cd -

          docker cp sci_container:coverage-reports .
          docker cp sci_container:test-reports .
          docker rm sci_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/sci
            - coverage-reports/sci


  build-pdk:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd PDK_Abstraction
          docker build -t pdk_image .

          docker run --name pdk_container pdk_image bash -c "source general/bin/activate && cd /src && pytest --junitxml=junit.xml && mkdir -p /test-reports/pdk && cp /src/junit.xml /test-reports/pdk"
          cd -

          docker cp pdk_container:test-reports .
          docker rm pdk_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/pdk


  build-cktgen:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd Cktgen
          docker build -t cktgen_image .

          docker run --name cktgen_container cktgen_image bash -c "source general/bin/activate && cd cktgen && coverage run --source=cktgen,tests setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/cktgen && cp /cktgen/junit.xml /test-reports/cktgen && mkdir -p /coverage-reports/cktgen && cp -r /cktgen/coverage.xml /cktgen/htmlcov /coverage-reports/cktgen"
          cd -

          docker cp cktgen_container:coverage-reports .
          docker cp cktgen_container:test-reports .
          docker rm cktgen_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/cktgen
            - coverage-reports/cktgen

  build-cellfabric:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd CellFabric
          docker build -t cellfabric_image -f ./Dockerfile ..

          docker run --name cellfabric_container cellfabric_image bash -c "source general/bin/activate && cd CellFabric && coverage run --source=cell_fabric,tests,Cell_Fabric_FinFET__Mock setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/cellfabric && cp /CellFabric/junit.xml /test-reports/cellfabric && mkdir -p /coverage-reports/cellfabric && cp -r /CellFabric/coverage.xml /CellFabric/htmlcov /coverage-reports/cellfabric"
          cd -

          docker cp cellfabric_container:coverage-reports .
          docker cp cellfabric_container:test-reports .
          docker rm cellfabric_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/cellfabric
            - coverage-reports/cellfabric


  build-satplacer:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          (cd Pysat; docker build -f Dockerfile.tally -t tally_image .)
          cd Pysat
          docker build -t satplacer_image -f ./Dockerfile ..

          docker run --name satplacer_container satplacer_image bash -c "source general/bin/activate && cd satplacer && coverage run --source=satplacer,tests setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/satplacer && cp /satplacer/junit.xml /test-reports/satplacer && mkdir -p /coverage-reports/satplacer && cp -r /satplacer/coverage.xml /satplacer/htmlcov /coverage-reports/satplacer"
          cd -

          docker cp satplacer_container:coverage-reports .
          docker cp satplacer_container:test-reports .
          docker rm satplacer_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/satplacer
            - coverage-reports/satplacer


  build-PlacementEditor:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd PlacementEditor
          docker build -t pe_image .
          docker run --name pe_container pe_image bash -c "npm run test && mkdir -p /test-reports/PlacementEditor && cp junit.xml /test-reports/PlacementEditor"
          cd -
          docker cp pe_container:test-reports .
          docker rm pe_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/PlacementEditor
            
  build-PlaceRouteHierFlow:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd Build
          docker build -f Dockerfile.build -t with_protobuf .

      - run: |
          cd PlaceRouteHierFlow
          docker build -t placeroute_image .
          docker volume create placerInputVol
          docker volume create placerOutputVol
          
      - run: |
          cd PlaceRouteHierFlow
          apk add bash
          ./run_small_in_docker.sh
          
  build-GDSConv:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd Build
          docker build -f Dockerfile.build.python -t with_python .

      - run: |
          cd GDSConv
          docker build -t gds_image . -f Dockerfile.python3
          
      - run: |
          docker run --name run_gds -ti gds_image /bin/bash -c "source general/bin/activate; cd /GDSConv && pytest"
          mkdir -p test-reports/gdsconv
          docker cp run_gds:/GDSConv/junit.xml test-reports/gdsconv

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/gdsconv

  mono_end_to_end:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: /work/workspace
          
      - setup_remote_docker

      - run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          
      - run: |
          docker volume create dr-collateral
          docker volume create inputVol
          docker volume create outputVol
          docker volume create equalizerInputVol
          docker volume create equalizerOutputVol
          docker volume create routerStrawman

      - run: |
          cd Cktgen
          docker build . -t cktgen

      - run: |
          cd Pysat
          docker build -f Dockerfile.tally -t tally_image .
          docker build -f Dockerfile.pysat -t satplacer_image .

      - run: |
          apk add bash python3
          cd Pysat
          /bin/bash ./bottom-up.sh
          mkdir -p ../test-reports/bottom-up
          cp bottom-up.test_result ../test-reports/bottom-up/results.xml

      - store_artifacts:
          path: test-reports

      - store_test_results:
          path: test-reports


  multi_end_to_end:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: /work/workspace
          
      - setup_remote_docker

      - run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          
      - run: |
          docker volume create dr-collateral
          docker volume create inputVol
          docker volume create outputVol
          docker volume create equalizerInputVol
          docker volume create equalizerOutputVol
          docker volume create routerStrawman

      - run: |
          cd Cktgen
          docker build . -t cktgen

      - run: |
          cd Pysat
          docker build -f Dockerfile.tally -t tally_image .
          docker build -f Dockerfile.pysat -t satplacer_image .

      - run: |
          docker run --mount source=equalizerInputVol,target=/INPUT --name copy_container ubuntu
          cd Pysat/INPUT
          docker cp stack_global_router_out.json copy_container:/INPUT/
          docker cp  stack_placer_out_scaled.json copy_container:/INPUT/

      - run: |
          apk update
          apk add bash python3 pytest
          cd Pysat/flow
          pytest
          mkdir -p ../../test-reports/regression
          cp junit.xml ../../test-reports/regression/results.xml


      - store_artifacts:
          path: test-reports

      - store_test_results:
          path: test-reports


  finish:
    executor: git-executor

    steps:
      - attach_workspace:
          at: /work/workspace

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

      - store_artifacts:
          path: coverage-reports


workflows:
  version: 2.1

  make:
    jobs:
      - start
      # - build-make:
      #     requires:
      #       - start 
      # - build-make-compose:
      #     requires:
      #       - start 
      - build-make-monolithic:
          requires:
            - start 

  # full:
  #   jobs:
  #     - start
  #     - build-tally:
  #         requires:
  #           - start 
  #     - build-sgi:
  #         requires:
  #           - start 
  #     - build-PlacementEditor:
  #         requires:
  #           - start 
  #     - build-PlaceRouteHierFlow:
  #         requires:
  #           - start 
  #     - build-GDSConv:
  #         requires:
  #           - start 
  #     - build-sci:
  #         requires:
  #           - start 
  #     - build-cktgen:
  #         requires:
  #           - start 
  #     - build-cellfabric:
  #         requires:
  #           - start 
  #     - build-satplacer:
  #         requires:
  #           - start 
  #     - build-pdk:
  #         requires:
  #           - start 
  #     - finish:
  #         requires:
  #           - build-tally 
  #           - build-sgi 
  #           - build-PlacementEditor 
  #           - build-GDSConv 
  #           - build-sci 
  #           - build-cellfabric
  #           - build-cktgen 
  #           - build-pdk 
  #           - build-satplacer

  # end_to_end:
  #   jobs:
  #     - start
  #     - mono_end_to_end:
  #         requires:
  #           - start
  #     - multi_end_to_end:
  #         requires:
  #           - start
