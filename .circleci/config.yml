version: 2.1

commands:
  run-load-align:
    description: "Load align image (contains pip installed align module + PlaceRouteHierFlow)"
    steps:
      - run:
          name: "Load align_image"
          command: |
            docker load --input align_image.tar
  run-nightly:
    description: "Run pytest tests/integration with appropriate flags & filters (Used in nightly regressions)"
    parameters:
      id:
        description: "Nightly test identifier (junit<id>.xml)"
        type: string
        default: ""
      filter:
        description: "String representing pytest -k argument"
        type: string
      timeout:
        description: "Integer representing pytest --timeout argument"
        type: string
        default: "1800"
    steps:
      - run:
          name: "Nightly<<parameters.id>>: <<parameters.filter>>"
          no_output_timeout: "<<parameters.timeout>>s"
          command: |
            docker run --name align_container align_image bash -c "\
              source setup.sh && \
              pytest -vv --runnightly --tb=line --timeout=<<parameters.timeout>> -k '<<parameters.filter>>' -- tests/integration && \
              mkdir -p /test-reports/align-nightly<<parameters.id>> && cp -r junit.xml LOG /test-reports/align-nightly<<parameters.id>>/ \
            "
            docker cp align_container:test-reports .
            docker rm align_container
      - store_artifacts:
          path: test-reports/align-nightly<<parameters.id>>
      - store_test_results:
          path: test-reports/align-nightly<<parameters.id>>
  run-make-docker:
    description: "Exercise the monolithic make docker flow"
    parameters:
      design:
        description: "Name of design (must exist within examples dir)"
        type: string
      flat:
        description: "Enter '1' if you want design to be flattened"
        type: string
        default: "0"
    steps:
      - run:
          name: "make docker DESIGN=<<parameters.design>>"
          command: |
            export ALIGN_HOME=`pwd`
            export ALIGN_WORK_DIR=compose_dataVolume
            cd build
            make docker DESIGN=<<parameters.design>> FLAT=<<parameters.flat>>
      - store_artifacts:
          path: build/<<parameters.design>>

executors:
  docker-executor:
    docker:
      - image: cimg/base:2021.01

jobs:
  start:
    executor: docker-executor
    steps:
      - checkout

      - run:
          name: "Build align_image"
          command: |
            docker build -t align_image -f ./build/Dockerfile.using-install.sh .

      - run:
          name: "Save align_image"
          command: |
            git clean -xdf
            docker save --output align_image.tar align_image
            du -h align_image.tar

      - persist_to_workspace:
          root: .
          paths:
            - .

  build-make-docker:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: .

      - run:
          name: "Make align-service"
          command: |
            export ALIGN_HOME=`pwd`
            export ALIGN_WORK_DIR=compose_dataVolume
            docker volume create --name=$ALIGN_WORK_DIR
            cd build
            make align-service

      - run-make-docker:
          design: "telescopic_ota"

      - run-make-docker:
          design: "test_vga"

      - run-make-docker:
          design: "switched_capacitor_filter"

      - run-make-docker:
          design: "current_mirror_ota"

      - run-make-docker:
          design: "cascode_current_mirror_ota"

      - run-make-docker:
          design: "five_transistor_ota"

      - run-make-docker:
          design: "adder"
          flat: "1"

  build-cktgen:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: .

      - run:
          name: "Build & run Cktgen tests"
          command: |
            cd Cktgen
            docker build -t cktgen_image .

            docker run --name cktgen_container cktgen_image bash -c "\
              source general/bin/activate && \
              cd cktgen && \
              coverage run --source=cktgen,tests setup.py test && \
              coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && \
              mkdir -p /test-reports/cktgen && cp junit.xml /test-reports/cktgen && \
              mkdir -p /coverage-reports/cktgen && cp -r coverage.xml htmlcov /coverage-reports/cktgen\
            "
            cd -

            docker cp cktgen_container:coverage-reports .
            docker cp cktgen_container:test-reports .
            docker rm cktgen_container

      - store_test_results:
          path: test-reports/cktgen

      - store_artifacts:
          path: coverage-reports/cktgen

  build-align:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: .

      - run-load-align

      - run:
          name: "Run pytest on align"
          command: |
            docker run --name align_container align_image bash -c "\
              source setup.sh && \
              unset ALIGN_WORK_DIR && \
              coverage run --source=align,tests setup.py pytest && \
              coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && \
              mkdir -p /test-reports/align && cp junit.xml /test-reports/align && \
              mkdir -p /coverage-reports/align && cp -r coverage.xml htmlcov /coverage-reports/align \
            "
            docker cp align_container:coverage-reports .
            docker cp align_container:test-reports .
            docker rm align_container

      - store_test_results:
          path: test-reports/align

      - store_artifacts:
          path: coverage-reports/align

  build-PlaceRouteHierFlow:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: .

      - run:
          name: "Build PlaceRouteHierFlow image"
          command: |
            cd PlaceRouteHierFlow
            docker build -t placeroute_coverage_image -f Dockerfile-coverage .
            docker volume create placerInputVol
            docker volume create placerOutputVol

      - run:
          name: "Run PlaceRouteHierFlow tests"
          command: |
            (cd PlaceRouteHierFlow && ./run_small_in_docker.sh)
            mkdir -p coverage-reports
            docker cp PnR:/PlaceRouteHierFlow/coverage.out coverage-reports/PlaceRouteHierFlow
            mkdir -p test-reports/PlaceRouteHierFlow/{PnRDB,placer,router,cap_placer}
            docker cp PnR:/PlaceRouteHierFlow/PnRDB/junit.xml test-reports/PlaceRouteHierFlow/PnRDB
            docker cp PnR:/PlaceRouteHierFlow/placer/junit.xml test-reports/PlaceRouteHierFlow/placer
            docker cp PnR:/PlaceRouteHierFlow/router/junit.xml test-reports/PlaceRouteHierFlow/router
            docker cp PnR:/PlaceRouteHierFlow/cap_placer/junit.xml test-reports/PlaceRouteHierFlow/cap_placer

      - store_test_results:
          path: test-reports/PlaceRouteHierFlow

      - store_artifacts:
          path: coverage-reports/PlaceRouteHierFlow

  build-nightly:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: .

      - run-load-align

      - run-nightly:
          id: "1_1"
          filter: "BUFFER and not BUFFER_VCM"
          timeout: "300"

      - run-nightly:
          id: "1_2"
          filter: "Sanitized_Coarse_Comp_CK or Sanitized_EdgeComparator or BTSW or Sanitized_ResTune_Configure and not Sanitized_ResTune_Configure"
          timeout: "2500"

      - run-nightly:
          id: "1_3"
          filter: "ota and not OTA_FF_2s_v3e"
          timeout: "250"

      - run-nightly:
          id: "1_4"
          filter: "single_SAR and not tb_single_SAR"
          timeout: "1700"

  build-nightly2:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: .

      - run-load-align

      - run-nightly:
          id: "2"
          filter: "not SAR and not San and not BUFFER and not DLL and not ota and not single_to_differential_converter and not COMPARATOR_2LEVEL_BIDIRECTIONAL_MAC_SKEW and not CTDSM_CORE_NEW"
          timeout: "1700"

workflows:
  version: 2.1

  nightly:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - master

    jobs:
      - start
      - build-nightly:
          requires:
            - start
      - build-nightly2:
          requires:
            - start
      - build-PlaceRouteHierFlow:
          requires:
            - start
      - build-cktgen:
          requires:
            - start
      - build-align:
          requires:
            - start
      - build-make-docker:
          requires:
            - start

  commit:
    jobs:
      - start
      - build-PlaceRouteHierFlow:
          requires:
            - start
      - build-cktgen:
          requires:
            - start
      - build-align:
          requires:
            - start
      - build-make-docker:
          requires:
            - start

