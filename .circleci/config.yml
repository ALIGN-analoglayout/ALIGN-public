version: 2.1

executors:
  docker-executor:
    docker:
      - image: docker:18.06.3-ce-git
    working_directory: /work/workspace

  git-executor:
    docker:
      - image: alpine/git
    working_directory: /work/workspace

jobs:
  start:
    executor: git-executor
    steps:
      - attach_workspace:
          at: /work/workspace
      - checkout
      - persist_to_workspace:
          root: /work/workspace
          paths: .

  build-make-docker:
    executor: docker-executor
    steps:

      - attach_workspace:
          at: /work/workspace

      - run: |
          apk update
          apk add py-pip bash make

      - run: |
          apk add python-dev libffi-dev openssl-dev gcc libc-dev make
          pip install docker-compose

      - setup_remote_docker

      - run:
          shell: /bin/bash
          command: |
            echo 'export ALIGN_HOME=/work/workspace' >> $BASH_ENV
            echo 'export ALIGN_WORK_DIR=compose_dataVolume' >> $BASH_ENV

      - run:
          shell: /bin/bash
          command: |
            docker volume create --name=$ALIGN_WORK_DIR

      - run:
          shell: /bin/bash
          command: |
            cd build/
            make docker DESIGN=telescopic_ota && \
            docker cp align_cont:/dataVolume/telescopic_ota ..

      - store_artifacts:
          path: telescopic_ota/telescopic_ota_0.png

      - run:
          shell: /bin/bash
          command: |
            cd build/
            make docker DESIGN=switched_capacitor_filter && \
            docker cp align_cont:/dataVolume/switched_capacitor_filter ..

      - store_artifacts:
          path: switched_capacitor_filter/switched_capacitor_filter_0.png

      - run:
          shell: /bin/bash
          command: |
            cd build/
            make docker DESIGN=current_mirror_ota && \
            docker cp align_cont:/dataVolume/current_mirror_ota ..

      - store_artifacts:
          path: current_mirror_ota/current_mirror_ota_0.png

      - run:
          shell: /bin/bash
          command: |
            cd build/
            make docker DESIGN=cascode_current_mirror_ota && \
            docker cp align_cont:/dataVolume/cascode_current_mirror_ota ..

      - store_artifacts:
          path: cascode_current_mirror_ota/cascode_current_mirror_ota_0.png

      - run:
          shell: /bin/bash
          command: |
            cd build/
            make docker DESIGN=five_transistor_ota && \
            docker cp align_cont:/dataVolume/five_transistor_ota ..

      - store_artifacts:
          path: five_transistor_ota/five_transistor_ota_0.png


      - run:
          shell: /bin/bash
          command: |
            cd build/
            make docker DESIGN=adder && \
            docker cp align_cont:/dataVolume/adder ..

      - store_artifacts:
          path: adder/adder_0.png

  build-cktgen:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd Cktgen
          docker build -t cktgen_image .

          docker run --name cktgen_container cktgen_image bash -c "source general/bin/activate && cd cktgen && coverage run --source=cktgen,tests setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/cktgen && cp /cktgen/junit.xml /test-reports/cktgen && mkdir -p /coverage-reports/cktgen && cp -r /cktgen/coverage.xml /cktgen/htmlcov /coverage-reports/cktgen"
          cd -

          docker cp cktgen_container:coverage-reports .
          docker cp cktgen_container:test-reports .
          docker rm cktgen_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/cktgen
            - coverage-reports/cktgen

  build-align:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          docker build -t align_image -f ./build/Dockerfile.base .

          docker run --name align_container align_image bash -c "source /opt/venv/bin/activate && cd ALIGN-public && coverage run --source=align,tests setup.py pytest && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/align && cp junit.xml /test-reports/align && mkdir -p /coverage-reports/align && cp -r coverage.xml htmlcov /coverage-reports/align"

          docker cp align_container:coverage-reports .
          docker cp align_container:test-reports .
          docker rm align_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/align
            - coverage-reports/align

  build-PlaceRouteHierFlow:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd PlaceRouteHierFlow
          docker build -t placeroute_coverage_image -f Dockerfile-coverage .
          docker volume create placerInputVol
          docker volume create placerOutputVol

      - run: |
          apk add bash
          (cd PlaceRouteHierFlow && ./run_small_in_docker.sh)
          mkdir -p coverage-reports
          docker cp PnR:/PlaceRouteHierFlow/coverage.out coverage-reports/PlaceRouteHierFlow
          mkdir -p test-reports/PlaceRouteHierFlow/{PnRDB,placer,router,cap_placer}
          docker cp PnR:/PlaceRouteHierFlow/PnRDB/junit.xml test-reports/PlaceRouteHierFlow/PnRDB
          docker cp PnR:/PlaceRouteHierFlow/placer/junit.xml test-reports/PlaceRouteHierFlow/placer
          docker cp PnR:/PlaceRouteHierFlow/router/junit.xml test-reports/PlaceRouteHierFlow/router
          docker cp PnR:/PlaceRouteHierFlow/cap_placer/junit.xml test-reports/PlaceRouteHierFlow/cap_placer

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/PlaceRouteHierFlow
            - coverage-reports/PlaceRouteHierFlow

      - store_artifacts:
          path: test-reports

      - store_artifacts:
          path: coverage-reports

  build-nightly:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          docker build -t align_image -f ./build/Dockerfile.base .

          docker run --name align_container align_image bash -c "source /opt/venv/bin/activate && cd /ALIGN-public && export ALIGN_HOME=/ALIGN-public && mkdir -p build/tmp && export ALIGN_WORK_DIR=/ALIGN-public/build/tmp && pytest -vv --runnightly --timeout=1200; mkdir -p /test-reports/align-nightly && cp junit.xml /test-reports/align-nightly"

          docker cp align_container:test-reports .
          docker rm align_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/align-nightly


  finish:
    executor: git-executor

    steps:
      - attach_workspace:
          at: /work/workspace

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

      - store_artifacts:
          path: coverage-reports

  finish-nightly:
    executor: git-executor

    steps:
      - attach_workspace:
          at: /work/workspace

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

workflows:
  version: 2.1

  make:
    jobs:
      - start
      - build-make-docker:
          requires:
            - start

  nightly:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - master

    jobs:
      - start
      - build-nightly:
          requires:
            - start
      - finish-nightly:
          requires:
            - build-nightly

  full:
    jobs:
      - start
      - build-PlaceRouteHierFlow:
          requires:
            - start
      - build-cktgen:
          requires:
            - start
      - build-align:
          requires:
            - start
      - finish:
          requires:
            - build-align
            - build-cktgen
            - build-PlaceRouteHierFlow

