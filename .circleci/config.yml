version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/base:2021.01

jobs:
  build-wheel:
    parameters:
      python-tags:
        description: "Python version tag(See https://www.python.org/dev/peps/pep-0425/)"
        type: string
        default: "cp37-cp37m cp38-cp38" # Python 3.7 *AND* 3.8
      platform:
        # https://github.com/pypa/manylinux
        description: "PEP600 compatible platform name"
        type: string
        default: "manylinux2010_x86_64"

    docker:
      - image: <<parameters.platform>>
    working_directory: /root/ALIGN-public
    environment:
      ALIGN_HOME: /root/ALIGN-public
      ALIGN_WORK_DIR: /root/ALIGN-public/work
      MAX_JOBS: 2 # number of vCPUs (2)

    steps:
      - checkout
      - run:
          name: Build Wheel
          command: |
              bin/build_wheel.sh <<parameters.python-tags>>
      - run:
          name: Test wheel
          command: |
              bin/test_wheel.sh <<parameters.python-tags>>
      - persist_to_workspace:
          root: .
          paths:
            - wheelhouse

  publish-wheel:
    executor: docker-executor

    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Zip distribution directory"
          command: |
            mkdir export
            tar --gzip -cf export/align-wheelhouse-$(echo "$CIRCLE_SHA1" | cut -c -7).tar.gz ./wheelhouse
      - store_artifacts:
          path: export

  build-test-cktgen:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build & run Cktgen tests"
          command: |
            cd Cktgen
            docker build -t cktgen_image .
            docker run --name cktgen_container cktgen_image bash -c '\
              source general/bin/activate && \
              cd cktgen && \
              coverage run --source=cktgen,tests -m pytest && \
              coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && \
              mkdir -p /test-reports/cktgen && cp junit.xml /test-reports/cktgen && \
              mkdir -p /coverage-reports/cktgen && cp -r coverage.xml htmlcov /coverage-reports/cktgen\
            '
            cd -
            docker cp cktgen_container:coverage-reports .
            docker cp cktgen_container:test-reports .
            docker rm cktgen_container
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: coverage-reports

  build-test-coverage:

    docker:
      - image: python:3.8
    working_directory: /root/ALIGN-public
    environment:
      ALIGN_HOME: /root/ALIGN-public
      ALIGN_WORK_DIR: /root/ALIGN-public/work
      MAX_JOBS: 2

    steps:
      - checkout
      - run:
          name: "Install coverage dependencies (lcov)"
          command: |
            apt-get update
            apt-get -y install lcov
      - run:
          name: "Build align in developer mode"
          command: |
            pip install setuptools wheel pybind11 scikit-build cmake ninja
            pip install -e .[test] --no-build-isolation --install-option="-DCODE_COVERAGE=ON"
      - run:
          name: "Test align using coverage.py"
          command: |
            rm -fr align setup.py
            ./runcoverage.py tests/
            cp junit.xml coverage-reports
      - store_test_results:
          path: coverage-reports
      - store_artifacts:
          path: coverage-reports

  test-integration:

    parameters:
      platform:
        description: "Choose docker image to run integration test on (eg. Ubuntu:18.04)"
        type: string
      pdk:
        description: "Choose PDK (Can be substring as it gets fed to pytest -k argument)"
        type: string
      design:
        description: "Choose Design (Can be substring as it gets fed to pytest -k argument)"
        type: string
      timeout:
        description: "Integer representing pytest --timeout argument"
        type: string
        default: "1800"

    docker:
      - image: <<parameters.platform>>
    working_directory: /root/ALIGN-public
    environment:
      ALIGN_HOME: /root/ALIGN-public
      ALIGN_WORK_DIR: /root/ALIGN-public/work
      MAX_JOBS: 2

    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "test-integration-<<parameters.platform>>-<<parameters.pdk>>(<<parameters.design>>)"
          no_output_timeout: "<<parameters.timeout>>s"
          command: |
            rm -fr align setup.py
            pip install align[test] -f ./wheelhouse
            filter="<<parameters.design>>"
            filter="<<parameters.pdk>>${filter:+ and $filter}"
            pytest -vv -n "$MAX_JOBS" --runnightly --maxerrors=20 --timeout=<<parameters.timeout>> --durations=0 -k "$filter" -- tests/integration
            mkdir -p test-reports/${CIRCLE_BUILD_NUM} && cp -r junit.xml LOG test-reports/${CIRCLE_BUILD_NUM}
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

workflows:
  version: 2.1
  commit:
    jobs:
      - build-test-cktgen
      - build-test-coverage
      - build-wheel:
          name: "build-wheel-<<matrix.platform>>"
          matrix:
            parameters:
              platform:
                - "skhep/manylinuxgcc-x86_64"          # PEP 513
                - "quay.io/pypa/manylinux2010_x86_64"  # PEP 571
                - "quay.io/pypa/manylinux2014_x86_64"  # PEP 599
                - "quay.io/pypa/manylinux_2_24_x86_64" # PEP 600
      - publish-wheel:
          requires:
            - build-wheel
      - test-integration:
          name: "test-integration-<<matrix.platform>>-<<matrix.pdk>>(<<matrix.design>>)"
          requires:
            - build-wheel
          matrix:
            parameters:
              platform:
                - "python:3.8"
              pdk:
                - "Finfet"
              design:
                - "BUFFER or ota or powertrain"
                - "Sanitized"
                - "vco_dtype"
                - "not BUFFER and not ota and not Sanitized and not vco_dtype and not powertrain and not SAR and not DLL and not single_to_differential_converter and not COMPARATOR_2LEVEL_BIDIRECTIONAL_MAC_SKEW and not CTD"
