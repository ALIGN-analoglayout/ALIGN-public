version: 2.1

executors:
  docker-executor:
    docker:
      - image: docker:18.06.3-ce-git
    working_directory: /work/workspace

  git-executor:
    docker:
      - image: alpine/git
    working_directory: /work/workspace

jobs:
  start:
    executor: git-executor
    steps:
      - attach_workspace:
          at: /work/workspace
      - checkout
      - persist_to_workspace:
          root: /work/workspace
          paths: .


  build-tally:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd Pysat
          docker build -f Dockerfile.tally -t tally_image .
          docker run --name tally_container tally_image bash -c "source /general/bin/activate && cd tally && coverage run --source=tally,tests setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/tally && cp /tally/junit.xml /test-reports/tally && mkdir -p /coverage-reports/tally && cp -r /tally/coverage.xml /tally/htmlcov /coverage-reports/tally"
          cd -
          docker cp tally_container:coverage-reports .
          docker cp tally_container:test-reports .
          docker rm tally_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/tally
            - coverage-reports/tally

  build-sgi:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          (cd Pysat; docker build -f Dockerfile.tally -t tally_image .)
          cd Experimental/SATBasedMonomorphism
          docker build -t sgi_image .
          docker run --name sgi_container sgi_image bash -c "source /general/bin/activate && cd sgi && coverage run --source=sgi,tests setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/sgi && cp /sgi/junit.xml /test-reports/sgi && mkdir -p /coverage-reports/sgi && cp -r /sgi/coverage.xml /sgi/htmlcov /coverage-reports/sgi"
          cd -

          docker cp sgi_container:coverage-reports .
          docker cp sgi_container:test-reports .
          docker rm sgi_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/sgi
            - coverage-reports/sgi


  build-sci:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd sub_circuit_identification
          docker build -t topology .

          docker run --name sci_container topology bash -c "source sympy/bin/activate && cd DEMO/src && pytest --junitxml=junit.xml --cov=. && coverage html && coverage xml && mkdir -p /test-reports/sci && cp /DEMO/src/junit.xml /test-reports/sci && mkdir -p /coverage-reports/sci && cp -r /DEMO/src/coverage.xml /DEMO/src/htmlcov /coverage-reports/sci"
          cd -

          docker cp sci_container:coverage-reports .
          docker cp sci_container:test-reports .
          docker rm sci_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/sci
            - coverage-reports/sci

  build-pdk:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd PDK_Abstraction
          docker build -t pdk_image .

          docker run --name pdk_container pdk_image bash -c "source general/bin/activate && cd /src && pytest --junitxml=junit.xml && mkdir -p /test-reports/pdk && cp /src/junit.xml /test-reports/pdk"
          cd -

          docker cp pdk_container:test-reports .
          docker rm pdk_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/pdk

  build-cktgen:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd Cktgen
          docker build -t cktgen_image .

          docker run --name cktgen_container cktgen_image bash -c "source general/bin/activate && cd cktgen && coverage run --source=cktgen,tests setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/cktgen && cp /cktgen/junit.xml /test-reports/cktgen && mkdir -p /coverage-reports/cktgen && cp -r /cktgen/coverage.xml /cktgen/htmlcov /coverage-reports/cktgen"
          cd -

          docker cp cktgen_container:coverage-reports .
          docker cp cktgen_container:test-reports .
          docker rm cktgen_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/cktgen
            - coverage-reports/cktgen


  build-satplacer:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          (cd Pysat; docker build -f Dockerfile.tally -t tally_image .)
          cd Pysat
          docker build -t satplacer_image -f ./Dockerfile ..

          docker run --name satplacer_container satplacer_image bash -c "source general/bin/activate && cd satplacer && coverage run --source=satplacer,tests setup.py test && coverage html && coverage xml && coverage-badge -o htmlcov/coverage.svg && mkdir -p /test-reports/satplacer && cp /satplacer/junit.xml /test-reports/satplacer && mkdir -p /coverage-reports/satplacer && cp -r /satplacer/coverage.xml /satplacer/htmlcov /coverage-reports/satplacer"
          cd -

          docker cp satplacer_container:coverage-reports .
          docker cp satplacer_container:test-reports .
          docker rm satplacer_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/satplacer
            - coverage-reports/satplacer


  build-PlacementEditor:
    executor: docker-executor
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /work/workspace

      - run: |
          cd PlacementEditor
          docker build -t pe_image .
          docker run --name pe_container pe_image bash -c "npm run test && mkdir -p /test-reports/PlacementEditor && cp junit.xml /test-reports/PlacementEditor"
          cd -
          docker cp pe_container:test-reports .
          docker rm pe_container

      - persist_to_workspace:
          root: /work/workspace
          paths:
            - test-reports/PlacementEditor

  mono_end_to_end:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: /work/workspace
          
      - setup_remote_docker

      - run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          
      - run: |
          docker volume create dr-collateral
          docker volume create inputVol
          docker volume create outputVol
          docker volume create equalizerInputVol
          docker volume create equalizerOutputVol
          docker volume create routerStrawman

      - run: |
          cd Cktgen
          docker build . -t cktgen

      - run: |
          cd Pysat
          docker build -f Dockerfile.tally -t tally_image .
          docker build -f Dockerfile -t satplacer_image ..

      - run: |
          apk add bash python3
          cd Pysat
          /bin/bash ./bottom-up.sh
          mkdir -p ../test-reports/bottom-up
          cp bottom-up.test_result ../test-reports/bottom-up/results.xml

      - store_artifacts:
          path: test-reports

      - store_test_results:
          path: test-reports

  multi_end_to_end:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: /work/workspace
          
      - setup_remote_docker

      - run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          
      - run: |
          docker volume create dr-collateral
          docker volume create inputVol
          docker volume create outputVol
          docker volume create equalizerInputVol
          docker volume create equalizerOutputVol
          docker volume create routerStrawman

      - run: |
          cd Cktgen
          docker build . -t cktgen

      - run: |
          cd Pysat
          docker build -f Dockerfile.tally -t tally_image .
          docker build -f Dockerfile.pysat -t satplacer_image .

      - run: |
          docker build -f Dockerfile -t tally .

      - run: |
          docker run --mount source=equalizerInputVol,target=/INPUT --name copy_container ubuntu
          cd Pysat/INPUT
          docker cp stack_global_router_out.json copy_container:/INPUT/
          docker cp  stack_placer_out_scaled.json copy_container:/INPUT/

      - run: |
          apk update
          apk add bash python3 pytest
          cd Pysat/flow
          pytest
          mkdir -p ../../test-reports/regression
          cp junit.xml ../../test-reports/regression/results.xml


      - store_artifacts:
          path: test-reports

      - store_test_results:
          path: test-reports

  finish:
    executor: git-executor

    steps:
      - attach_workspace:
          at: /work/workspace

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

      - store_artifacts:
          path: coverage-reports

workflows:
  version: 2.1

  full:
    jobs:
      - start:
          type: approval
      - build-tally:
          requires:
            - start 
      - build-sgi:
          requires:
            - start 
      - build-PlacementEditor:
          requires:
            - start 
      - build-sci:
          requires:
            - start 
      - build-cktgen:
          requires:
            - start 
      - build-satplacer:
          requires:
            - start 
      - build-pdk:
          requires:
            - start 
      - finish:
          requires:
            - build-tally 
            - build-sgi 
            - build-PlacementEditor 
            - build-sci 
            - build-cktgen 
            - build-pdk 
            - build-satplacer

  end_to_end:
    jobs:
      - start
      - mono_end_to_end:
          requires:
            - start

  end_to_end2:
    jobs:
      - start
      - multi_end_to_end:
          requires:
            - start
