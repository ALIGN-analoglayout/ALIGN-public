# -*- coding: utf-8 -*-
"""
Created on Wed Nov 21 13:12:15 2018

@author: kunal
"""
import networkx as nx
from BasicElement import BasicElement
from read_netlist import *
import pickle
from read_lef import read_lef

class writeVerilog:
    def __init__(self, circuit_graph , circuit_name,
                  inout_pin_names):
        self.circuit_graph = circuit_graph
        self.circuit_name = circuit_name
        self.inout_pins = inout_pin_names
        self.pins = inout_pin_names
        
        
    def print_module(self, fp):
        fp.write("\nmodule "+self.circuit_name+" ( ")
        fp.write(', '.join(str(i) for i in self.pins))
        fp.write(" ); ")

        if self.inout_pins:
            fp.write("\ninout ")
            fp.write(', '.join(str(i) for i in self.inout_pins))
            fp.write(";\n")


        for node,attr in self.circuit_graph.nodes(data=True): 
            if 'source' in attr['inst_type']:  continue 
            #if 'mos' in attr['inst_type']: continue 
            #print("check name",node)
            if 'net' not in attr['inst_type']:
                fp.write("\n"+attr['inst_type']+" "+node +' ( ')
                #print(node)
                #print("node,attributes",attr)
                #print("nets",nets)
                #nets = (' '.join(str(i) for i in nets))
                ports=[]
                nets=[]
                if "ports_match" in attr:
                    #[ports,nets]=attr["ports_match"].items()
                    for key,value in attr["ports_match"].items():
                        ports.append(key)
                        nets.append(value)
                    #nets=attr["ports_match"].values()
                else:
                    #print("matching ports")
                    ports=attr["ports"]
                    #nets=attr["ports"] 
                    nets = list(self.circuit_graph.neighbors(node))

                #print("pair",ports,nets)
                mapped_pins = self.map_pins(ports,nets)
                #print(mapped_pins)
                if mapped_pins:
                    fp.write(', '.join(str(i) for i in mapped_pins))
                    fp.write(' ); ')
                else: print ("MAPPING NOT CORRECT")
        
        fp.write("\n\nendmodule\n")


    def map_pins(self,a,b):
        if len(a) == len(b):
            #print("number of pins",len(a))
            mapped_pins = []
            for i in range(len(a)):
                mapped_pins.append("."+a[i]+"("+b[i]+")")
                
                #print("mapping pins")
            return mapped_pins
        elif len(set(a)) == len(set(b)):
            if len(a) > len (b):
                mapped_pins = []
                check_sort =[]
                no_of_sort =0
                for i in range(len(a)):
                    if a[i] in check_sort:
                        mapped_pins.append(mapped_pins[check_sort.index(a[i])])
                        no_of_sort+=1
                    else:
                        mapped_pins.append("."+a[i]+"("+b[i-no_of_sort]+")")
                        check_sort.append(a[i])
                    
                    #print("mapping pins")
                return mapped_pins                
                
            
        else: 
            print("unmatched ports found")
            return 0
        
def print_globals(fp,power):
    fp.write("\n\n// End HDL models")
    fp.write("\n// Global nets module")
    fp.write("\n`celldefine")
    fp.write("\nmodule cds_globals;\n")
    for i in range(len(power)):
        fp.write("\nsupply"+str(i)+" "+power[i]+";")
        
    fp.write("\n\nendmodule")
    fp.write("\n`endcelldefine")
    fp.close()                  
def print_header(fp,filename):
    fp.write("//Verilog block level netlist file for "+filename)
    fp.write("\n//Generated by UMN for ALIGN project \n\n")
    #fp.write("\n`timescale 1ns / 1ns")       
 
#%%           
if __name__ == '__main__':
    result_dir = "results/"
    filenames = os.listdir(result_dir)
    input_pickle =[]
    for files in  filenames:
        if files.endswith('.p'):
            input_pickle.append(files[:-2])
    input_pickle =input_pickle[0]
    # write a verilog file
    verilog_fp = open(result_dir+input_pickle+'.v', 'w')
    print_header(verilog_fp,input_pickle)
    power_pins=["VDD","VSS"]
    #read lef to not write those modules as macros
    available_block_lef = read_lef()
    print(available_block_lef)
   
    with open(result_dir+input_pickle+'.p', 'rb') as fp:
        list_graph = pickle.load(fp)
    #print(list_graph)
    for members in list_graph:
        #print(members)
        graph = members["lib_graph"]
        name = members["name"]

        if name in available_block_lef: continue
        #print("GRAPH:name,nodes",name,graph.nodes())
        #print("ports_match:",members["ports_match"])
        #inoutpin = members["ports_match"].keys()
        #print(members.keys())
        if "ports" in members.keys():
            inoutpin = members["ports"]
        else:
            inoutpin = []
        #print("inout pins:",inoutpin)
        wv = writeVerilog(graph, name , inoutpin )
        wv.print_module(verilog_fp)

    print_globals(verilog_fp,power_pins)
    print("OUTPUT verilog netlist at:",result_dir+input_pickle+".v")
