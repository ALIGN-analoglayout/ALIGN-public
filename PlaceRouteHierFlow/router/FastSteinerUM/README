This is an updated version of the batched greedy code (and the instance
generator) used in

  A.B. Kahng, I.I. Mandoiu, and A. Zelikovsky, Highly scalable algorithms for 
  rectilinear and octilinear Steiner trees, Proc. 2003 Asia and South 
  Pacific Design Automation Conference (ASP-DAC), pp. 827-833.

To get a brief list of parameters type "steiner -help" or "gen -help"
after successfuly making the two executables.  

The updated code is due to Jarrod Alexander Roy from the University of
Michigan. Jarrod's description of the modifications is as follows:

  Specifically to be in the UMpack, I modified the Makefile, changed the
  .c extensions to .cxx and added the file umextra.cxx . You need not 
  worry about these changes. I also put all of the FastSteiner code in its 
  own C++ namespace because some of your types clashed with the ones we 
  had implemented previously (Point, for example). I also #ifdef'd out the
  timing functions if one were to compile on Windows because the UMpack 
  must support Windows compilation and we don't use the timing 
  functionality of FastSteiner.

  The major change I had to make to FastSteiner was for a bug that I 
  found. Your mst2() implementation crashes hard if there are any 
  duplicated points in its input. As a caller to the stnr1 function, this 
  isn't so bad because I can make sure that there are no duplicated points 
  in my input (a note to the affect that duplicated points are bad as 
  input would have been nice, though :) ). You also have the function 
  reduced_mst2() that removes any added steiner points that are duplicates 
  of one another. The problem is that I have observed instances where 
  added steiner points are duplicates of the original input points to 
  stnr1(). This leads to crashes in the mst2() function.

  To get around this problem, I copy the list of input points at the
  beginning of stnr1() and sort it. I could just sort the given list of
  points in place, but I decided against it because you get different
  steiner trees depending on the input point order and I didn't want to 
  get rid of that possible functionality. I pass this list of points to
  reduced_mst2() and have that function remove any steiner points that are
  duplicates of other steiner points or the initial points. Since the
  initial points are sorted, this uniquing step is linear in the total
  number of points and shouldn't be a considerable runtime hit.
